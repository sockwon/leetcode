/**
 * @param {number[]} nums
 * @return {number}
 */
var findLHS = function(nums) {
    //sub 의 모든 원소는 0 또는 1 차이가 난다. 
    //차이값이 0만 있다면 반환값은 0이다.
    //따라서 가장 작은 값은 2. 2보다 작은 값은 나타날 수 없다.
    //[2,2,2,2,2,2] 는 0이다. 그러나 [2,2,2,2,2,3] 은 6이다.
    //음수 값도 존재. 
    //최대 길이 2000개 배열을 대상으로 작동할 수 있어야 한다.
    //배열의 원소를 분류한다. 각 원소가 동일한 값을 가질 때 분류값을 더한다.
    //각각의 분류 값에서 가장 큰 값의 아래 위를 더한다. 큰 값을 찾아 반환한다.

    const target = [...nums].reduce((acc,val)=>{
        if(!acc[`${val}`]){
            acc[`${val}`] = 1
        }else{
            acc[`${val}`]++
        }
        return acc
       },{})

    const resultArr = Object.keys(target).reduce((acc,val)=>{
        if(target[`${Number(val)+1}`]){
            acc.push(target[val] + target[`${Number(val)+1}`])
        }
            return acc
         },[])

    if(resultArr.length === 0) return 0
    return Math.max(...resultArr)
};
